{"version":3,"sources":["components/ExtraServices/ExtraServices.js","components/Services/Services.js","store/index.js","components/Services/index.js","components/EventItem/EventItem.js","components/EventList/EventList.js","components/EventList/index.js","components/CreateEventForm/CreateEventForm.js","components/CreateEventForm/index.js","App.js","index.js"],"names":["ExtraServices","event","addExtraService","currentEventIndex","useState","visible","toggleVisibility","securityAssistanceSelected","toggleSecurityAssistance","medicalAssistanceSelected","toggleMedicalAssistance","govApprovalSelected","toggleGovApproval","Divider","hidden","Button","content","onClick","className","securityAssistanceAdded","Checkbox","checked","onChange","label","medicalAssistanceAdded","govApprovalAdded","Services","startDate","endDate","events","findIndex","ev","id","eventType","peopleNumber","convertStringToDate","startDatetime","endDatetime","getDay","every","day","initialState","JSON","parse","localStorage","getItem","name","address","eventTypes","ADD_EVENT","ADD_EXTRA_SERVICE","ADD_EVENT_TYPE","getEvents","state","getEventTypes","store","createStore","action","type","newEvent","newEventType","updatedEvents","eventIndex","service","subscribe","getState","setItem","stringify","Enhanced","connect","dispatch","dateString","split","year","month","Date","rearrangeDate","date","EventItem","eventStartDate","eventEndDate","EventList","alert","useAlert","filterVisible","toggleFilterVisibility","filteringOrders","togglefilteringOrders","selectedEventStartDate","setEventStartDate","selectedEventEndDate","setEventEndDate","filter","some","Input","value","e","target","required","show","handleEndDate","map","key","CreateEventForm","addEvent","addEventType","addingNewType","toggleAddingNewType","eventName","setEventName","eventAddress","setEventAddress","eventPeopleNumber","setEventPeopleNumber","setEventType","setNewEventType","handleSubmit","preventDefault","length","toLowerCase","handleStartDate","currentDate","mm","getMonth","dd","getDate","yyyy","getFullYear","toString","padStart","onSubmit","placeholder","disabled","match","style","evType","charAt","toUpperCase","substring","App","to","exact","path","render","component","options","position","positions","BOTTOM_CENTER","timeout","offset","transition","transitions","SCALE","ReactDOM","template","AlertTemplate","document","getElementById"],"mappings":"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","file":"static/js/main.b4431247.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Checkbox, Divider } from 'semantic-ui-react';\nimport './ExtraServices.scss';\n\nconst ExtraServices = ({\n  event,\n  addExtraService,\n  currentEventIndex\n}) => {\n  const [visible, toggleVisibility] = useState(false);\n  const [securityAssistanceSelected, toggleSecurityAssistance] = useState(false);\n  const [medicalAssistanceSelected, toggleMedicalAssistance] = useState(false);\n  const [govApprovalSelected, toggleGovApproval] = useState(false);\n\n  const handleSubmit = () => {\n    if (securityAssistanceSelected) {\n      addExtraService(currentEventIndex, 'securityAssistance');\n    }\n    if (medicalAssistanceSelected) {\n      addExtraService(currentEventIndex, 'medicalAssistance');\n    }\n    if (govApprovalSelected) {\n      addExtraService(currentEventIndex, 'govApproval');\n    }\n    toggleVisibility(!visible); \n  }\n  \n  return (\n    <div>\n      <Divider hidden />\n      <Button\n        content={!visible ? 'Order extra services' : 'Cancel'}\n        onClick={() => toggleVisibility(!visible)}\n        className=\"services-btn\"\n      />\n      <div hidden={!visible} className=\"checkboxes\">\n        {!event.securityAssistanceAdded\n          ? <Checkbox \n            checked={securityAssistanceSelected} \n            onChange={() => toggleSecurityAssistance(!securityAssistanceSelected)}\n            label={<label>Security assistance</label>}\n            /> \n          : null\n        }\n        {!event.medicalAssistanceAdded\n          ? <Checkbox  \n            checked={medicalAssistanceSelected} \n            onChange={() => toggleMedicalAssistance(!medicalAssistanceSelected)}\n            label={<label>Medical assistance</label>} \n            /> \n          : null\n        }\n        {!event.govApprovalAdded\n          ? <Checkbox \n            checked={govApprovalSelected} \n            onChange={() => toggleGovApproval(!govApprovalSelected)}\n            label={<label>Gov approval</label>} \n            /> \n            : null\n        }\n        <Button onClick={handleSubmit} className=\"services-btn\">Submit</Button>\n      </div>\n    </div>\n  );\n}\n\nExtraServices.propTypes = {\n  event: PropTypes.shape({\n    name: PropTypes.string,\n    address: PropTypes.string,\n    peopleNumber: PropTypes.number,\n    eventType: PropTypes.string,\n    startDatetime: PropTypes.string,\n    endDatetime: PropTypes.string,\n  }).isRequired,\n  addExtraService: PropTypes.func.isRequired,\n  currentEventIndex: PropTypes.number.isRequired,\n};\n\nexport default ExtraServices;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ExtraServices from '../ExtraServices/ExtraServices';\nimport './Services.scss';\nimport { convertStringToDate } from '../EventItem/EventItem';\n\nfunction isWeekday(startDate, endDate) {\n  let days = [startDate.getDay(), endDate.getDay()];\n  if (days.every(day => day === 0 || day === 6)) {\n    return false;\n  }\n\n  return true;\n}\n\nconst Services = ({ event, events, addExtraService }) => {\n  const currentEventIndex = events.findIndex(ev => ev.id === event.id);\n  \n  if (\n    (event.eventType === 'public' || event.peopleNumber > 20)\n    && !event.securityAssistanceAdded\n  ) {\n    addExtraService(currentEventIndex, 'securityAssistance');\n  }\n\n  if (\n    (event.eventType === 'public' || event.peopleNumber > 50)\n    && !event.medicalAssistanceAdded\n  ) {\n    addExtraService(currentEventIndex, 'medicalAssistance');\n  }\n\n  if (\n    (event.eventType === 'public' \n      || isWeekday(\n        convertStringToDate(event.startDatetime), \n        convertStringToDate(event.endDatetime)\n      ) \n    )\n    && !event.govApprovalAdded\n  ) {\n    addExtraService(currentEventIndex, 'govApproval');\n  }\n\n  return (\n    <div className=\"orders\">\n      {event.securityAssistanceAdded \n        ? <pre><span className=\"checkmark\">&#10003;</span> Security assistance</pre> \n        : null\n      }\n      {event.medicalAssistanceAdded \n        ? <pre><span className=\"checkmark\">&#10003;</span> Medical assistance</pre> \n        : null\n      }\n      {event.govApprovalAdded \n        ? <pre><span className=\"checkmark\">&#10003;</span> Gov approval</pre> \n        : null\n      }\n      {!event.securityAssistanceAdded \n          || !event.medicalAssistanceAdded \n          || !event.govApprovalAdded\n        ? <ExtraServices \n            events={events} \n            event={event} \n            addExtraService={addExtraService}\n            currentEventIndex={currentEventIndex}\n          />\n        : null\n      }\n    </div>\n  );\n};\n\nServices.propTypes = {\n  event: PropTypes.shape({\n    name: PropTypes.string,\n    address: PropTypes.string,\n    peopleNumber: PropTypes.number,\n    eventType: PropTypes.string,\n    startDatetime: PropTypes.string,\n    endDatetime: PropTypes.string,\n  }).isRequired,\n  events: PropTypes.arrayOf(PropTypes.object),\n  addExtraService: PropTypes.func.isRequired,\n};\n\nexport default Services;","import { createStore } from 'redux';\n\nconst events = [\n  {\n    id: 1,\n    name: \"Business conference\",\n    address: 'Richmond, VA',\n    peopleNumber: 18,\n    eventType: 'private',\n    startDatetime: '2019-11-30',\n    endDatetime: '2019-12-01',\n  },\n  {\n    id: 2,\n    name: \"Business conference\",\n    address: 'Richmond, VA',\n    peopleNumber: 18,\n    eventType: 'public',\n    startDatetime: '2019-10-30',\n    endDatetime: '2019-11-03',\n  },\n  {\n    id: 3,\n    name: \"Family reunion\",\n    address: 'New York, NY',\n    peopleNumber: 21,\n    eventType: 'private',\n    startDatetime: '2019-11-27',\n    endDatetime: '2019-11-28',\n  },\n  {\n    id: 4,\n    name: \"Family reunion\",\n    address: 'New York, NY',\n    peopleNumber: 51,\n    eventType: 'private',\n    startDatetime: '2019-11-30',\n    endDatetime: '2019-12-01',\n  },\n  {\n    id: 5,\n    name: \"Family reunion\",\n    address: 'New York, NY',\n    peopleNumber: 19,\n    eventType: 'private',\n    startDatetime: '2019-11-29',\n    endDatetime: '2019-12-01',\n  }\n];\n\nlet initialState = {\n  events: JSON.parse(localStorage.getItem('events')) || events,\n  eventTypes: JSON.parse(localStorage.getItem('eventTypes')) \n    || [\n      { id: 1, name: 'public' }, \n      { id: 2, name: 'private' },\n    ],\n};\n\nconst ADD_EVENT = 'ADD_EVENT';\nconst ADD_EXTRA_SERVICE = 'ADD-EXTRA-SERVICE';\nconst ADD_EVENT_TYPE = 'ADD_EVENT_TYPE';\n\nexport const addEvent = (newEvent) => ({ type: ADD_EVENT, newEvent, });\nexport const getEvents = state => state.events;\nexport const getEventTypes = state => state.eventTypes;\nexport const addEventType = (newEventType) => ({ type: ADD_EVENT_TYPE, newEventType });\nexport const addExtraService = (eventIndex, service) => ({\n  type: ADD_EXTRA_SERVICE,\n  eventIndex,\n  service,\n});\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case ADD_EVENT:\n      return {\n        ...state,\n        events: [...state.events, action.newEvent],\n      };\n    case ADD_EVENT_TYPE:\n      return {\n        ...state,\n        eventTypes: [...state.eventTypes, action.newEventType],\n      };\n    case ADD_EXTRA_SERVICE:\n      let updatedEvents = [...state.events];\n      updatedEvents[action.eventIndex][`${action.service}Added`] = true;\n      return {\n        ...state,\n        events: updatedEvents,\n      };\n    default:\n      return state;\n  }\n}\n\nconst store = createStore(reducer, initialState);\nstore.subscribe(() => {\n  const { events, eventTypes } = store.getState();\n  localStorage.setItem('events', JSON.stringify(events));\n  localStorage.setItem('eventTypes', JSON.stringify(eventTypes));\n});\n\nexport default store;\n","import Services from './Services';\nimport { connect } from 'react-redux';\nimport { addExtraService, getEvents } from '../../store/index';\n\nconst getData = state => ({\n  events: getEvents(state),\n});\n\nconst getMethods = dispatch => ({\n  addExtraService: (eventIndex, service) => \n    dispatch(addExtraService(eventIndex, service)),\n});\n\nconst Enhanced = connect(\n  getData, \n  getMethods,\n)(Services);\n\nexport { Enhanced as Services };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Services } from '../Services/index';\nimport './EventItem.scss';\n\nexport const convertStringToDate = (dateString) => {\n  const [year, month, day] = dateString.split('-');\n  return new Date(year, month - 1, day);\n};\n\nconst rearrangeDate = (date) => {\n  const [year, month, day] = date.split('-');\n  return `${month}/${day}/${year}`;\n}\n\nconst EventItem = ({ event }) => { \n  const eventStartDate = rearrangeDate(event.startDatetime);\n  const eventEndDate = rearrangeDate(event.endDatetime);\n\n  return (\n    <li className=\"event-item\">\n      <div className=\"event-item__head\">\n        <h2 className=\"event-item__heading\">{event.name}</h2>\n        <span>{new Date() < convertStringToDate(event.endDatetime)\n          ? 'Open' \n          : 'Closed'}\n        </span>\n      </div>\n      <p><strong>Event type:</strong> {event.eventType}</p>\n      <pre>{eventStartDate} - {eventEndDate}  •  {event.address}</pre>\n      <p className=\"event-item__attendees-info\">\n        {event.peopleNumber} people are going \n      </p>\n      <Services event={event} />\n    </li>\n  );\n};\n\nEventItem.propTypes = {\n  event: PropTypes.shape({\n    name: PropTypes.string,\n    address: PropTypes.string,\n    peopleNumber: PropTypes.number,\n    eventType: PropTypes.string,\n    startDatetime: PropTypes.string,\n    endDatetime: PropTypes.string,\n  }).isRequired,\n};\n\nexport default EventItem;","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport EventItem from '../EventItem/EventItem';\nimport { useAlert } from 'react-alert';\nimport { convertStringToDate } from '../EventItem/EventItem';\nimport { Button, Checkbox, Divider, Input } from 'semantic-ui-react';\nimport './EventList.scss';\n\nconst EventList = ({ events }) => {\n  const alert = useAlert();\n  const [filterVisible, toggleFilterVisibility] = useState(false);\n  const [filteringOrders, togglefilteringOrders] = useState(false);\n  const [selectedEventStartDate, setEventStartDate] = useState('');\n  const [selectedEventEndDate, setEventEndDate] = useState('');\n  let updatedEvents = [...events];\n  \n  if (filterVisible) {\n    if (selectedEventStartDate) {\n      updatedEvents = [...updatedEvents].filter(event => \n        convertStringToDate(event.endDatetime) >= convertStringToDate(selectedEventStartDate));\n    }\n    if (selectedEventEndDate) {\n      updatedEvents = [...updatedEvents].filter(event => \n        convertStringToDate(event.startDatetime) <= convertStringToDate(selectedEventEndDate));\n    }\n    if (filteringOrders) {\n      updatedEvents = [...updatedEvents].filter(event => {\n        const services = [\n          event.securityAssistanceAdded,\n          event.medicalAssistanceAdded,\n          event.govApprovalAdded\n        ];\n        return services.some(service => service);\n      });\n    }\n  } else {\n    if (selectedEventStartDate) {\n      setEventStartDate('');\n    }\n    if (selectedEventEndDate) {\n      setEventEndDate('');\n    }\n    if (filteringOrders) {\n      togglefilteringOrders(!filteringOrders);\n    }\n  }\n\n  const handleEndDate = (e) => {\n    if (e.target.value >= selectedEventStartDate) {\n      setEventEndDate(e.target.value)\n    } else {\n      alert.show(\"Event cannot end before it was started\");\n    }\n  };\n\n  return (\n    <main className=\"main-content\">\n      <Divider hidden />\n      <Button\n        content={!filterVisible ? 'Filter events' : 'Hide filter'}\n        onClick={() => toggleFilterVisibility(!filterVisible)}\n      />\n      <div hidden={!filterVisible}>\n        <div className=\"date-picker\">\n          <label>\n            From: <br /> \n            <Input \n              type=\"date\"\n              value={selectedEventStartDate} \n              onChange={(e) => setEventStartDate(e.target.value)}\n              required\n            />\n          </label>\n          <label>\n            To: <br /> \n            <Input \n              type=\"date\"\n              value={selectedEventEndDate} \n              onChange={(e) => handleEndDate(e)}\n              required\n            />\n          </label>\n        </div>\n        <Checkbox  \n        checked={filteringOrders} \n        onChange={() => togglefilteringOrders(!filteringOrders)}\n        label={<label>Show events with orders only</label>} \n        /> \n      </div>\n      <Divider hidden />\n      <ul className=\"event-list\">\n        {updatedEvents.map(event => (\n          <EventItem key={event.id} event={event} />\n        ))}\n      </ul>\n    </main>\n  );\n};\n\nEventList.propTypes = {\n  events: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default EventList;","import EventList from './EventList';\nimport { connect } from 'react-redux';\nimport { getEvents } from '../../store/index';\n\nconst getData = state => ({\n  events: getEvents(state),\n});\n\nconst Enhanced = connect(\n  getData,\n)(EventList);\n\nexport { Enhanced as EventList };\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './CreateEventForm.scss';\nimport { useAlert } from 'react-alert';\nimport { Input, Button } from 'semantic-ui-react';\n\nconst currentDate = () => {\n  const currentDate = new Date();\n  let mm = currentDate.getMonth() + 1;\n  let dd = currentDate.getDate();\n  const yyyy = currentDate.getFullYear();\n  return `${yyyy}-${mm.toString().padStart(2, '0')}-${dd.toString().padStart(2, '0')}`;\n};\n\nexport const convertStringToDate = (dateString) => {\n  const [year, month, day] = dateString.split('-');\n  return new Date(year, month - 1, day);\n};\n\nconst CreateEventForm = ({ addEvent, events, eventTypes, addEventType }) => {\n  const alert = useAlert();\n  const [addingNewType, toggleAddingNewType] = useState(false);\n  const [eventName, setEventName] = useState('');\n  const [eventAddress, setEventAddress] = useState('');\n  const [eventPeopleNumber, setEventPeopleNumber] = useState('');\n  const [eventType, setEventType] = useState('');\n  const [eventStartDate, setEventStartDate] = useState('');\n  const [eventEndDate, setEventEndDate] = useState('');\n  const [newEventType, setNewEventType] = useState('');\n\n  if (eventType === 'Add new event type' && !addingNewType) {\n    toggleAddingNewType(!addingNewType);\n  }\n  \n  const createNewEvent = () => ({\n    id: events[events.length - 1].id + 1,\n    name: eventName,\n    address: eventAddress,\n    peopleNumber: +eventPeopleNumber,\n    eventType,\n    startDatetime: eventStartDate,\n    endDatetime: eventEndDate,\n  });\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!addingNewType) {\n      addEvent(createNewEvent());\n      alert.show('Event was added successfully!')\n      setEventName('');\n      setEventAddress('');\n      setEventPeopleNumber('');\n      setEventType('');\n      setEventStartDate('');\n      setEventEndDate('');\n    } else {\n      if (newEventType) {\n        addEventType({ \n          id: eventTypes[eventTypes.length - 1].id + 1, \n          name: newEventType.toLowerCase(),\n        });\n        setNewEventType('');\n        alert.show('Event type was added successfully!');\n      }\n      toggleAddingNewType(!addingNewType);\n      setEventType('');\n    }\n  };\n\n  const handleStartDate = (e) => {\n    if (currentDate() <= e.target.value) {\n      setEventStartDate(e.target.value);\n    } else {\n      alert.show('Choose valid date');\n      setEventStartDate('');\n    }\n  };\n\n  const handleEndDate = (e) => {\n    if (e.target.value >= eventStartDate) {\n      setEventEndDate(e.target.value)\n    } else {\n      alert.show(\"Event cannot end before it was started\");\n    }\n  };\n\n  return (\n    <main>\n      <form className=\"create-event-form\" onSubmit={(e) => handleSubmit(e)}>\n        <Input \n          type=\"text\"\n          value={eventName} \n          onChange={(e) => setEventName(e.target.value)}\n          placeholder=\"Event name\"\n          disabled={addingNewType}\n          required\n        />\n        <Input \n          type=\"text\"\n          value={eventAddress} \n          onChange={(e) => setEventAddress(e.target.value)}\n          placeholder=\"Location\"\n          disabled={addingNewType}\n          required\n        />\n        {!addingNewType\n          ? <select \n              className=\"types-dropdown\" \n              style={{'color': eventType ? '' : '#cdc9c9'}}\n              value={eventType}\n              onChange={(e) => {\n                setEventType(e.target.value);\n              }}\n              required\n            >\n              <option value=\"\" hidden>Select event type</option>\n              {eventTypes.map(evType => (\n                <option \n                  value={evType.name} \n                  className=\"types-dropdown__option\"\n                  key={evType.id}\n                >\n                  {evType.name.charAt(0).toUpperCase() + evType.name.substring(1)}\n                </option>\n              ))}\n              <option className=\"types-dropdown__option types-dropdown__option_add\">\n                Add new event type\n              </option>\n            </select>\n          : <Input \n              type=\"text\"\n              value={newEventType} \n              onChange={(e) => {\n                if (\n                  (e.target.value.match(/\\b[a-z]+\\b/i) || !e.target.value)\n                  && e.target.value.length <= 15\n                ) {\n                  setNewEventType(e.target.value);\n                } else {\n                  alert.show(\"Event type must contain one word of no more than 15 letters\");\n                }\n              }}\n              placeholder=\"New type name\"\n            />\n        }\n        \n        <Input \n          type=\"number\"\n          value={eventPeopleNumber} \n          onChange={(e) => {\n            if (+e.target.value > 0) {\n              return setEventPeopleNumber(e.target.value);\n            } else {\n              return setEventPeopleNumber('');\n            }\n          }}\n          placeholder=\"How many people will attend?\"\n          disabled={addingNewType}\n          required\n        />\n        <div className=\"date-picker\">\n          <label>\n            Event starts: <br /> \n            <Input \n              type=\"date\"\n              value={eventStartDate} \n              onChange={(e) => handleStartDate(e)}\n              disabled={addingNewType}\n              required\n            />\n          </label>\n          <label>\n            Event ends: <br /> \n            <Input \n              type=\"date\"\n              value={eventEndDate} \n              onChange={(e) => handleEndDate(e)}\n              disabled={addingNewType}\n              required\n            />\n          </label>\n        </div>\n        <Button \n          type=\"submit\" \n          className=\"create-event-form__submit-btn\"\n        >\n          Submit\n        </Button>\n      </form>\n    </main>\n  );\n};\n\nCreateEventForm.propTypes = {\n  events: PropTypes.arrayOf(PropTypes.object).isRequired,\n  addEvent: PropTypes.func.isRequired,\n};\n\nexport default CreateEventForm;","import CreateEventForm from './CreateEventForm';\nimport { connect } from 'react-redux';\nimport { addEvent, getEvents, getEventTypes, addEventType } from '../../store/index';\n\nconst getData = state => ({\n  events: getEvents(state),\n  eventTypes: getEventTypes(state),\n});\n\nconst getMethods = dispatch => ({\n  addEvent: (value) => dispatch(addEvent(value)),\n  addEventType: (value) => dispatch(addEventType(value)),\n});\n\nconst Enhanced = connect(\n  getData, \n  getMethods,\n)(CreateEventForm);\n\nexport { Enhanced as CreateEventForm };\n","import React from 'react';\nimport './App.scss';\nimport {\n  Route,\n  Switch,\n  NavLink,\n} from 'react-router-dom';\nimport { EventList } from './components/EventList/index';\nimport { CreateEventForm } from './components/CreateEventForm/index';\n\nfunction App() {\n  return (\n    <>\n      <header className=\"header\">\n        <nav>\n          <ul className=\"menu-list\">\n            <li className=\"menu-list__item\">\n              <NavLink className=\"menu-list__link\" to=\"/\" exact>\n                Home\n              </NavLink>\n            </li>\n            <li className=\"menu-list__item\">\n              <NavLink className=\"menu-list__link\" to=\"/events\">\n                Events\n              </NavLink>\n            </li>\n            <li className=\"menu-list__item\">\n              <NavLink className=\"menu-list__link\" to=\"/new-event\">\n                Create a new event\n              </NavLink>\n            </li>\n          </ul>\n        </nav>\n      </header>\n\n      <Switch>\n        <Route exact path=\"/\" render={() => \n          <h1 style={{ 'textAlign': 'center' }}>Home page</h1>\n        }/>\n        <Route path=\"/events\" component={EventList} />\n        <Route path=\"/new-event\" component={CreateEventForm} />\n      </Switch>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { transitions, positions, Provider as AlertProvider } from 'react-alert';\nimport AlertTemplate from 'react-alert-template-basic';\nimport store from './store/index';\n\nconst options = {\n  position: positions.BOTTOM_CENTER,\n  timeout: 5000,\n  offset: '30px',\n  transition: transitions.SCALE,\n}\n\nReactDOM.render(\n  <Provider store={ store }>\n    <AlertProvider template={AlertTemplate} {...options}>\n      <HashRouter><App /></HashRouter>\n    </AlertProvider>\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}